#define $timer rec $timer. \
  1=>2 \
  {^ResetTimer: $timer, \
   ^ReadSeconds: 2=>1<Int>; $timer, \
   ^WaitSeconds: 1=>2<Int>; 2=>1<Bool>; $timer, \
   ^GetTimestamp: 2=>1<Int>; $timer, \
   ^End: Gend \
  }
(nu timer: $timer)
HOSTHEADER("#include <time.h>");
HOSTHEADER("#include <unistd.h>");
def TimeServer() =
  link(2,timer,t,2);
  def TimeSession(t: $timer@(2 of 2), start: Int ) =
    t[1]>>
    {^ResetTimer:   HOST("{ time_t _t=time(0); ", start, "=libpi::IntValue(_t); }");
                    TimeSession(t,start),
     ^ReadSeconds:  now:Int=0;
                    HOST("{ time_t _t=time(0); ", now, "=libpi::IntValue(_t); }");
                    t[1]<<now-start;
                    TimeSession(t,start),
     ^WaitSeconds:  t[1]>>wait;
                    HOST("sleep( mpz_get_ui((", wait, ").GetValue()) );");
                    t[1]<<true;
                    TimeSession(t,start),
     ^GetTimestamp: now:Int=0;
                    HOST("{ time_t _t=time(0); ", start, "=libpi::IntValue(_t); }");
                    t[1]<<now;
                    TimeSession(t,start),
     ^End:          end
    }
  in 
  ( TimeServer()
  | start:Int=0;
    HOST("{ time_t _t=time(0); ", start, "=libpi::IntValue(_t); }");
    TimeSession(t,start)
  )
in TimeServer() |
