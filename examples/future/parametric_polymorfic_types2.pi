// Adding type values to enable parametricaly polymorfic types
// Syntax in global type:
// k:&x; G // Specify type (can be any type except global types and local types
// k:$x; // Specify type (can be any global type)
// k:%x; // Specify type (can be any local type)
// Syntax in local type: forall %x; T (for participant k)
// Syntax in local type: exists %x; T (for other participants)
// Syntax in terms: session<<S; Pi (for participant k)
// Showing example of polymorphic ordered lists
// The interface of a list {{{
#define $anyleq(x) \
  2->1:x; \
  2->1:x; \
  1->2:Bool; \
  $end
#define $anylist(x) \
  rec $l; \
  2->1: \
  {^Insert: 2->1:x; \
            $l; \
   ^Lookup: 2->1:Int; \
            1->2: \
            {^NONE: $l; \
             ^SOME: 1->2:x; \
                    $l; \
            } \
   ^Delete: $end; \
  }

#define $list \
  2:$x; \
  2->1:$anyleq($x)(1 pure,2); \
  $anylist($x);
$list(1 pure,2) list;
local pure service List($list (1 of 1 pure, 2) s) // Implement list {{{
( s[2]>>$t;
  s[2]>>type_leq;
  global pure NIL($anylist($t)(2 of 1 pure,2) this) = // {{{
    this[2]>>
    {^Insert:
      global pure CONS($anylist($t)(1 of 1 pure,2) this, $anylist($t)(2 of 1 pure,2) next, $t v) // {{{
      ( this[2]>>
        {^Insert:
          next[1]<<^Insert;
          this[2]>>newVal;
          cmp=new type_leq(2 of 1 pure, 2);
          cmp[1]<<v;
          cmp[1]<<newVal;
          cmp[1]>>is_leq;
          if (is_leq)
          then next[1]<<newVal; CONS(this,next,v);
          else next[1]<<v; CONS(this,next,newVal);
         ^Lookup:
          this[2]>>pos;
          if pos<=0
          then this[2]<<^SOME;
               this[2]<<v;
               CONS(this,next,v)
          else next[1]<<^Lookup;
               next[1]<<pos-1;
               next[2]>>
               {^SOME:
                 this[2]<<^SOME;
                 next[2]>>val;
                 this[2]<<val;
                 CONS(this,next,v),
                ^NONE:
                 this[2]<<^NONE;
                 CONS(this,next,v)
               },
         ^Delete:
          next[1]<<^Delete;
          end
        } // }}}
      )
      this[2]>>val;
      s=new list(2 of 2);
      s<<$t;
      s[1]<<type_leq;
      CONS(this,s,val);
     ^Lookup:
      this[2]>>pos;
      this[2]<<^NONE;
      NIL(this);
     ^Delete:
    } // }}}
  in NIL(s)
) | // }}}
global $anyleq(Int)(1 pure,2) int_leq;
local pure service IntLEQ(int_leq (1 of 2) s) // {{{
( s[1]>>x;
  s[1]>>y;
  s[2]<<x<=y;
) | // }}}
global $anyleq(String)(1 pure,2) string_leq;
local pure service StringLEQ(string_leq (1 of 2) s) // {{{
( s[1]>>x;
  s[1]>>y;
  s[2]<<x<=y;
) | // }}}
// Main
myIntList=new list(2 of 2);
myIntList << Int;
myIntList[1]<<int_leq;
myIntList[1]<<^Insert<<3; // myIntList = [0:3]
myIntList[1]<<^Insert<<1; // myIntList = [0:1, 1:3]
myIntList[1]<<^Insert<<2; // myIntList = [0:1, 1:2, 2:3]
myStrList=new list(2 of 2);
myStrList<<String;
myIntList[1]<<string_leq;
myStrList[1]<<^Insert<<"Hello"; // myStrList = [0:"Hello"]
myStrList[1]<<^Insert<<" ";     // myStrList = [0:" ", 1:"Hello"]
myStrList[1]<<^Insert<<"World"; // myStrList = [0:" ", 1:"Hello", 2:"World"]
myIntList[1]<<^Lookup<<2; // Retrieve element 2 from myIntList
myIntList[2]>>            // Returns ^SOME, 3
{^NONE: myIntList[1]<<^Delete; myStrList[1]<<^Delete;
 ^SOME: myList[2]>>val; myIntList[1]<<^Delete; myStrList[1]<<^Delete;
}
