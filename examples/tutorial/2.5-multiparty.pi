// Example 2.5 - Multiparty protocols
// Four processes connect on channel, and
// transfer a value roundrobin over the resulting session.

#include <console.pi>

// Define thee $intmsg protocol (session type)
// where participant 1 sends an integer to participant 2.
#define $rr4 \
  1->2:Int; \
  2->3:Int; \
  3->4:Int; \
  4->1:Int; \
  $end;

// Create channel a with 4 participants using $rr4 protocol
global $rr4 a(1,2,3,4);

// First process implementation
s=new a(1 of 4); // Connect on channel a as participant 1 of 4, resulting in session s
c=new console(2 of 2);
c[1]<<^PutString<<"1: Sending value"<<^PutInt<<5<<^End;
s[2]<<5;
s[4]>>x;
c=new console(2 of 2);
c[1]<<^PutString<<"1: Received value"<<^PutInt<<x<<^End;

| // Fork

// Second process implementation
s=new a(2 of 4); // Connect on channel a as participant 2 of 4, resulting in session s
s[1]>>x;
Int y=x+1;
c=new console(2 of 2);
c[1]<<^PutString<<"2:Received value"<<^PutInt<<x
    <<^PutString<<"2:Sending value"<<^PutInt<<y<<^End;
s[3]<<y;

| // Fork

// Second process implementation
s=new a(3 of 4); // Connect on channel a as participant 3 of 4, resulting in session s
s[2]>>x;
Int y=x*x;
c=new console(2 of 2);
c[1]<<^PutString<<"3:Received value"<<^PutInt<<x
    <<^PutString<<"3:Sending value"<<^PutInt<<y<<^End;
s[4]<<y;

| // Fork

// Second process implementation
s=new a(4 of 4); // Connect on channel a as participant 4 of 4, resulting in session s
s[3]>>x;
Int y=x-1;
c=new console(2 of 2);
c[1]<<^PutString<<"4:Received value"<<^PutInt<<x
    <<^PutString<<"4:Sending value"<<^PutInt<<y<<^End;
s[1]<<y;
