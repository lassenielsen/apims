// Example 2.5 - Multiparty protocols
// Four processes connect on channel, and
// transfer a value roundrobin over the resulting session.

#include <console.pi>

// Define the $rr4 protocol (session type)
// where participant 1 sends an integer to participant 2
// who sends an integer to participant 3
// who sends an integer to participant 4
// who sends an integer to participant 1.
#define $rr4 \
  1->2:Int; \
  2->3:Int; \
  3->4:Int; \
  4->1:Int; \
  $end;

// Create channel a with 4 participants using $rr4 protocol
global $rr4 a(1,2,3,4);

// First process implementation
s=new a(1 of 4); // Connect on channel a as participant 1 of 4, resulting in session s
c=new console(2 of 2);
c[1]<<^str<<"1: Sending value: "<<^int<<5<<^nl<<^end;
s[2]<<5;
s[4]>>x;
c=new console(2 of 2);
c[1]<<^str<<"1: Received value: "<<^int<<x<<^nl<<^end;

| // Fork

// Second process implementation
s=new a(2 of 4); // Connect on channel a as participant 2 of 4, resulting in session s
s[1]>>x;
c=new console(2 of 2);
c[1]<<^str<<"2: Received value: "<<^int<<x<<^nl
    <<^str<<"2: Sending value: "<<^int<<x<<^nl<<^end;
s[3]<<x;

| // Fork

// Third process implementation
s=new a(3 of 4); // Connect on channel a as participant 3 of 4, resulting in session s
s[2]>>x;
c=new console(2 of 2);
c[1]<<^str<<"3: Received value: "<<^int<<x<<^nl
    <<^str<<"3: Sending value: "<<^int<<x<<^nl<<^end;
s[4]<<x;

| // Fork

// Fourth process implementation
s=new a(4 of 4); // Connect on channel a as participant 4 of 4, resulting in session s
s[3]>>x;
c=new console(2 of 2);
c[1]<<^str<<"4: Received value: "<<^int<<x<<^nl
    <<^str<<"4: Sending value: "<<^int<<x<<^nl<<^end;
s[1]<<x;
