// Example 5.2 - The HOST and HOSTHEADER statements.
// Hoists the full power of the host language (c++), mixing hapi and host
// language statements and data.

// HOSTHEADER is added to generated c++ code header. Even though HOSTHEADER
// statement may be 'executed' many times, the header is only added once.
HOSTHEADER("#include <iostream>");
// Use assorted types of values
Int x1=1;
String x2="2";
Bool x3=true;
Int x4=4;
String x5="5";
Bool x6=false;
Int x7=7;
String x8="8";
Bool x9=true;
( // Simple printing, although be aware the pitfalls of using raw c++ io
  // ie no coordination with other outputting processes.
  HOST("std::cout << ((libpi::Int*)", x1, ".get())->ToString() << std::flush << ((libpi::String*)", x2, ".get())->GetValue() << std::flush << ((libpi::Bool*)", x3, ".get())->ToString() << std::endl;");
| HOST("std::cout << ((libpi::Int*)", x4, ".get())->ToString() << std::flush << ((libpi::String*)", x5, ".get())->GetValue() << std::flush << ((libpi::Bool*)", x6, ".get())->ToString() << std::endl;");
| HOST("std::cout << ((libpi::Int*)", x7, ".get())->ToString() << std::flush << ((libpi::String*)", x8, ".get())->GetValue() << std::flush << ((libpi::Bool*)", x9, ".get())->ToString() << std::endl;");
| // Use host language (c++) functionality in output
  HOST("std::cout << (((libpi::Bool*)", x3, ".get())->GetValue()?((libpi::Int*)", x1, ".get())->ToString():((libpi::String*)", x2, ".get())->GetValue()) << std::endl;");
| HOST("std::cout << (((libpi::Bool*)", x6, ".get())->GetValue()?((libpi::Int*)", x4, ".get())->ToString():((libpi::String*)", x5, ".get())->GetValue()) << std::endl;");
| HOST("std::cout << (((libpi::Bool*)", x9, ".get())->GetValue()?((libpi::Int*)", x7, ".get())->ToString():((libpi::String*)", x8, ".get())->GetValue()) << std::endl;");
)
| // Retrieve/import values from host language to hapi process
  String str1="Hello";
  String space=" ";
  String str2="World";
  String res="";
  HOST("", res, ".reset(new libpi::String(((libpi::String*)", str1, ".get())->GetValue() + ((libpi::String*)", space, ".get())->GetValue() + ((libpi::String*)", str2, ".get())->GetValue()));");
  HOST("std::cout << ((libpi::String*)", res, ".get())->GetValue() << std::endl;"); // Outputs "Hello World"
