#pragma once
HOSTHEADER("#include <time.h>");
HOSTHEADER("#include <unistd.h>");

#define $timer rec $timer; \
  2->1 \
  {^reset: \
    $timer; \
   ^read: \
    1->2:Float; \
    $timer; \
   ^wait: \
    2->1:Float; \
    1->2:Bool; \
    $timer; \
   ^timestamp: \
    1->2:Int; \
    $timer; \
   ^syc: \
    2:#t; \
    2->1:#t; \
    $timer; \
   ^end: \
    $end; \
  }
global $timer timer(1,2);
local service TimeService(timer (1 of 2) t)
( local TimeSession($timer(1 of 1,2) t, Float start)
  ( t[2]>>
    {^reset:
      HOST("{ time_t _t=time(0); ", start, "=std::shared_ptr<libpi::Float>(new libpi::Float(_t)); }");
      TimeSession(t,start);
     ^read:
      Float now=0;
      HOST("{ time_t _t=time(0); ", now, "=std::shared_ptr<libpi::Float>(new libpi::Float(_t)); }");
      t[2]<<now-start;
      TimeSession(t,start);
     ^wait:  t[2]>>wait;
      HOST("sleep( mpz_get_ui(((libpi::Float*)", wait, ".get())->GetValue()) );");
      t[2]<<true;
      TimeSession(t,start);
     ^timestamp:
      Float now=0.0;
      HOST("{ time_t _t=time(0); ", start, "=std::shared_ptr<libpi::Float>(new libpi::Float(_t)); }");
      t[2]<<now;
      TimeSession(t,start);
     ^sync:
      t[2]>>wait;
      TimeSession(t,start);
     ^end:          
    }
  )
  Float start=0;
  HOST("{ time_t _t=time(0); ", start, "=std::shared_ptr<libpi::Float>(new libpi::Float(_t)); }");
  TimeSession(t,start);
  )
) TimeServer(); |
