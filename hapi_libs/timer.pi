#pragma once
HOSTHEADER("#include <time.h>");
HOSTHEADER("#include <unistd.h>");

#define $timer rec $timer; \
  2->1 \
  {^ResetTimer: $timer; \
   ^ReadSeconds: 1->2:Int; $timer; \
   ^WaitSeconds: 2->1:Int; 1->2:Bool; $timer; \
   ^GetTimestamp: 1->2:Int; $timer; \
   ^Require: 2->1:Int; $timer; \
   ^End: $end; \
  }
global $timer timer(1,2);
local TimeServer()
( t = new timer(1 of 2);
  local TimeSession($timer(1 of 1,2) t, Int start)
  ( t[2]>>
    {^ResetTimer:   HOST("{ time_t _t=time(0); ", start, "=std::shared_ptr<libpi::Int>(new libpi::Int(_t)); }");
                    TimeSession(t,start);
     ^ReadSeconds:  Int now=0;
                    HOST("{ time_t _t=time(0); ", now, "=std::shared_ptr<libpi::Int>(new libpi::Int(_t)); }");
                    t[2]<<now-start;
                    TimeSession(t,start);
     ^WaitSeconds:  t[2]>>wait;
                    HOST("sleep( mpz_get_ui((", wait, ")->GetValue()) );");
                    t[2]<<true;
                    TimeSession(t,start);
     ^GetTimestamp: Int now=0;
                    HOST("{ time_t _t=time(0); ", start, "=std::shared_ptr<libpi::Int>(new libpi::Int(_t)); }");
                    t[2]<<now;
                    TimeSession(t,start);
     ^Require:      t[2]>>wait;
                    TimeSession(t,start);
     ^End:          
    }
  )
  ( TimeServer();
  | Int start=0;
    HOST("{ time_t _t=time(0); ", start, "=std::shared_ptr<libpi::Int>(new libpi::Int(_t)); }");
    TimeSession(t,start);
  )
) TimeServer(); |
